bool dfs(vector<int> graph[], int visited[], int cur, int target)
{
    if(target == cur) return true;
    visited[cur] = 1;
    
    for(auto x : graph[cur])
    {
        if(visited[x] == 0)
        {
            if(dfs(graph, visited, x, target) == true)
            {
                return true;
            }
                
        }
    }
    
    return 0;
}


bool bfs(vector<int> graph[], int visited[], int c, int target)
{
    queue<int> q;
    
    q.push(c);
    
    while(q.size() > 0)
    {
        int cur = q.front();
        q.pop();
        
        if(cur == target) return 1;
        visited[cur] = 1;
        for(auto x : graph[cur])
        {
            if(visited[x] == 0)
            {
                q.push(x);
            }
        }
    }
    
    return 0;
}

int main() {
  
    vector<int> graph[10];
    int n; cin>>n;
    
    int visited[10] = {0};
    
    for(int i = 0;i<n;i++)
    {
        int a,b;
        cin>>a>>b;
        graph[a].push_back(b);
        graph[b].push_back(a);
    }
    
    cout<<bfs(graph, visited, 4,6);
    

}
